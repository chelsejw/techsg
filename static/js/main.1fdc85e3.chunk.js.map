{"version":3,"sources":["components/Nav.js","components/StackOptions.js","components/Options.js","components/StackBtn.js","components/TableRow.js","components/Table.js","components/MainData.js","components/PaginatorBtn.js","components/Paginator.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","StackOptions","checkboxes","stack","map","item","class","value","name","for","Options","StackBtn","icon_name","toLowerCase","TableRow","stackButtons","data","tech","i","key","scope","num","company","target","rel","link","title","length","created","moment","require","Table","rows","job","index","created_at","format","firstIndex","MainData","failure","loading","lastUpdate","css","color","size","PaginatorBtn","current","onClick","setPage","text","Paginator","info","next","prev","count","pageButtons","Math","ceil","push","App","useState","jobs","setJobs","setLoading","setFailure","setLastUpdate","setStack","currentPage","setCurrentPage","sort","pagination","setPagination","queries","useEffect","join","axios","get","then","res","console","log","results","previous","catch","err","itemsPerPage","firstItemIndex","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.1fdc85e3.chunk.js","sourcesContent":["import React from 'react'\n\nconst Nav = (props) => {\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-dark\">\n        <a className=\"navbar-brand\" href=\"#\">\n          Tech@SG\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarNav\"\n          aria-controls=\"navbarNav\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n          <ul className=\"navbar-nav\">\n            <li className=\"nav-item active\">\n              <a className=\"nav-link\" href=\"#\">\n                Home <span className=\"sr-only\">(current)</span>\n              </a>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    );\n}\n\nexport default Nav ","import React from 'react'\n\nconst StackOptions = (props) => {\n\n    const checkboxes = props.stack.map(item => {\n        return (\n            <div class=\"form-check\">\n                <input class=\"form-check-input\" type=\"checkbox\" value={item.name} id={`techid_${item.id}`}/>\n                <label class=\"form-check-label\" for={`techid_${item.id}`}>\n                    {item.name}\n                </label>\n            </div>\n        )\n    })\n\n    return (<div className=\"col-md-3 opt opt-stack\">\n    {checkboxes}\n    </div>)\n\n}\n\nexport default StackOptions","import React from 'react'\nimport StackOptions from './StackOptions'\n\nconst Options = (props) => {\n\n    return (\n      <div className=\"options-container\">\n        <div className=\"opt-headers row\">\n          <div className=\"col-md-3\">Stack</div>\n          <div className=\"col-md-7\">Company</div>\n          <div className=\"col-md-2\">Sort</div>\n        </div>\n        <div className=\"options-items row\">\n          <StackOptions stack={props.stack} />\n\n          <div className=\"col-md-7 opt opt-companies\"></div>\n\n          <div className=\"col-md-2 opt opt-sort\"></div>\n        </div>\n      </div>\n    );\n\n}\n\nexport default Options","import React from 'react'\n\nconst StackBtn = (props)=> {\n\n  //Devicons not supported: Firebase, Flutter, GraphQL\n\n\n    let icon_name = props.name.toLowerCase()\n\n    switch (icon_name) {\n      case \"express\":\n        icon_name = \"expressjs\"\n        break;\n      case \"mongo\":\n        icon_name = \"mongodb\"\n        break;\n      case \".net\":\n        icon_name = \"dotnet\"\n        break;\n      case \"aws\":\n        icon_name = \"amazonwebservices\"\n        break;\n      case \"node\":\n        icon_name = \"nodejs\";\n        break;\n      case \"golang\":\n        icon_name = \"go\";\n        break;\n      case \"c#\":\n        icon_name = \"csharp\";\n        break;\n      case \"angular\":\n        icon_name = \"angularjs\";\n        break;\n      case \"c++\":\n        icon_name = \"cplusplus\";\n        break;\n      case \"vue\":\n        icon_name = \"vuejs\"\n        break;\n      default:\n        break;\n    }\n\n    return (\n      <div className={`stack-btn mr-2 mb-1`}>\n        <i\n          className={`devicon-${icon_name}-plain stack-${icon_name}`}\n        ></i>\n      </div>\n    );\n}\n\nexport default StackBtn","import React from 'react'\nimport StackBtn from './StackBtn'\n\nconst TableRow = (props) => {\n\n    const stackButtons = props.data.stack.map((tech, i) => {\n        return <StackBtn key={i} name={tech} />;\n    })\n\n    return (\n      <tr>\n        <th scope=\"row\">{props.num}</th>\n        <td>{props.data.company}</td>\n        <td>\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href={props.data.link}>\n            {props.data.title}\n          </a>\n        </td>\n        <td>{stackButtons.length > 0 ? stackButtons : \"-\"}</td>\n        <td>{props.created}</td>\n      </tr>\n    );\n}\n\nexport default TableRow","import React from 'react'\nimport TableRow from './TableRow'\nvar moment = require('moment'); // require\n\n\nconst Table = (props) => {\n    const rows = props.data.map((job, index) => {\n        return (\n            <TableRow key={job.id} created={moment(job.created_at).format(\"DD/MM/YYYY\")} num={props.firstIndex+index} data={job}/>\n        )\n    })\n\n    return (\n      <div className=\"table-responsive\">\n        <table className=\"mt-2 table table-dark\">\n          <thead>\n            <tr>\n              <th scope=\"col\">#</th>\n              <th scope=\"col\">Company</th>\n              <th scope=\"col\">Title</th>\n              <th scope=\"col\">Stack</th>\n              <th scope=\"col\">Added</th>\n\n            </tr>\n          </thead>\n          <tbody>{rows}</tbody>\n        </table>\n\n        {props.data.length < 1 && \"There is no data.\"}\n      </div>\n    );\n}\n\nexport default Table","import React from 'react'\nimport Table from './Table'\nimport RingLoader from 'react-spinners/RingLoader'\n\nconst MainData = (props) => {\n\n    const {failure, loading, lastUpdate, data} = props\n\n    return (\n        <div>\n          {!failure && !loading && \n            (<div>\n              <div className=\"text-right last-add-jobs\">Last added jobs: {lastUpdate} SGT</div>\n              <Table firstIndex={props.firstIndex} data={data} />\n            </div>)}\n          {loading && (<div className=\"my-5\">\n              <RingLoader\n                css={\"margin: 0 auto;\"}\n                color={\"#d84242\"}\n                size={150}\n                loading={loading}\n              />\n              <div className=\"text-center mt-3\">\n                <span className=\"main-loading-txt\">Getting jobs...</span>\n              </div>\n            </div>)}\n\n          {failure && <div className=\"text-center mt-3\">\n                <span className=\"main-loading-txt\">Failed to get jobs.</span>\n              </div>}\n        </div>\n    )\n}\n\nexport default MainData","import React from 'react'\nconst PaginatorBtn = (props)=> {\n    return (\n      <button\n        className={`direction-btn ${props.current && \"direction-btn-active\"}`}\n        onClick={() => {\n          props.setPage(props.num);\n        }}\n      >\n        {props.text}\n      </button>\n    );\n}\n\nexport default PaginatorBtn","import React from 'react'\nimport PaginatorBtn from './PaginatorBtn'\nconst Paginator = (props)=> {\n\n    const {next, prev, count} = props.info\n    const current = props.current\n    let pageButtons = [];\n\n    let totalPages = Math.ceil(count/20)\n\n    for (let i=current-2; i < current+3; i++) {\n      if (i > 0) {\n        pageButtons.push(\n          <PaginatorBtn\n            current={i == current ? true : false}\n            setPage={props.setPage}\n            num={i}\n            text={i}\n          />\n        );\n      }\n    }\n\n\n    return (\n      <div className=\"my-3 text-center\">\n      \n        <div className=\"pg-btns\">\n          {prev && (\n            <PaginatorBtn setPage={props.setPage} num={current - 1} text=\"<\" />\n          )}\n          {pageButtons}\n          {next && (\n            <PaginatorBtn setPage={props.setPage} num={current + 1} text=\">\" />\n          )}\n        </div>\n      </div>\n    );\n}\n\nexport default Paginator","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Nav from './components/Nav'\nimport moment from 'moment'\nimport Options from './components/Options'\nimport MainData from './components/MainData'\nimport SupportedHeader from './components/SupportedHeader'\nimport Paginator from './components/Paginator'\n\nconst App = () => {\n    const [jobs, setJobs] = useState([]);\n    const [loading, setLoading] = useState(true)\n    const [failure, setFailure] = useState(false)\n    const [lastUpdate, setLastUpdate] = useState({})\n    const [stack, setStack] = useState([])\n    const [currentPage, setCurrentPage] = useState(1)\n    const [sort, setSort] = useState(\"default\")\n    const [pagination, setPagination] = useState({})\n    const [company, setCompany] = useState(null)\n    const [queries, setQueries] = useState(null)\n\n    useEffect(() => {\n      let stackUrlString;\n      if (queries && queries.length > 0) {\n        stackUrlString = `&stack=${queries.join(\"&stack=\")}`\n      }\n      let companyUrlString = \"\"\n      if (company) {\n        companyUrlString = `&company=${company}`\n      }\n        axios.get(`https://tech-sg.herokuapp.com/jobs/?page=${currentPage}`)\n        .then((res) => {\n          console.log(res)\n            setJobs(res.data.results);\n            setPagination({\n              count: res.data.count,\n              next: res.data.next,\n              prev: res.data.previous,\n            })\n            setLastUpdate((prev) => {\n              return {\n                ...prev,\n                jobs: res.data.results[0].created_at\n              };\n            });\n            setLoading(false)\n        })\n        .catch((err) => {\n          setLoading(false)\n          setFailure(true)\n          console.log(`Error in axios request`, err)\n        })\n\n        axios\n          .get(\"https://tech-sg.herokuapp.com/tech\")\n          .then((res) => {\n            setStack(res.data);\n            setLastUpdate((prev) => {\n              return {\n                ...prev,\n                tech: res.data[res.data.length - 1].created_at,\n              };\n            });\n          })\n          .catch((err) => {\n            console.log(`Error in axios request for tech`, err);\n          });\n    }, []);\n\n    useEffect(()=> {\n      let stackUrlString;\n      if (queries && queries.length > 0) {\n        stackUrlString = `&stack=${queries.join(\"&stack=\")}`;\n      }\n      let companyUrlString = \"\";\n      if (company) {\n        companyUrlString = `&company=${company}`;\n      }\n        axios\n          .get(`https://tech-sg.herokuapp.com/jobs?page=${currentPage}`)\n          .then((res) => {\n            console.log(res.data);\n            setJobs(res.data.results);\n            setPagination({\n              count: res.data.count,\n              next: res.data.next,\n              prev: res.data.previous,\n            });\n            setLoading(false);\n          })\n          .catch((err) => {\n            setLoading(false);\n            setFailure(true);\n            console.log(`Error in axios request`, err);\n          });\n\n    }, [currentPage, queries, company, sort])\n\n    useEffect(()=> {\n      console.log(jobs)\n      console.log(stack)\n    }, [jobs, stack, lastUpdate])\n\n    const firstItemIndex = (itemsPerPage, currentPage) => {\n      return itemsPerPage*(currentPage-1)+1\n    }\n\n\n    return (\n      <div>\n        <Nav />\n        <div className=\"container\">\n          <h1 className=\"text-center main-header mb-2\">Tech@SG</h1>\n\n          {/* <SupportedHeader\n            lastUpdate={moment(lastUpdate.tech).format(\"DD MMMM YYYY\")}\n            stack={stack}\n          /> */}\n          <Options stack={stack} />\n\n          <Paginator\n            current={currentPage}\n            info={pagination}\n            setPage={setCurrentPage}\n          />\n\n          <MainData\n            firstIndex={firstItemIndex(20, currentPage)}\n            loading={loading}\n            failure={failure}\n            lastUpdate={moment(lastUpdate.jobs).format(\"DD MMM, h:mm:ss a\")}\n            data={jobs}\n          />\n\n          <Paginator\n            current={currentPage}\n            info={pagination}\n            setPage={setCurrentPage}\n          />\n        </div>\n      </div>\n    );\n\n};\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}